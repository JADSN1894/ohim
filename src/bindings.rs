// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[allow(unused_unsafe, clippy::all)]
/// FIXME: Workaround of callback until scoped callback is supported:
/// https://github.com/WebAssembly/component-model/issues/412
pub fn register_callback(name: &str) -> () {
    unsafe {
        let vec0 = name;
        let ptr0 = vec0.as_ptr().cast::<u8>();
        let len0 = vec0.len();
        #[cfg(target_arch = "wasm32")]
        #[link(wasm_import_module = "$root")]
        unsafe extern "C" {
            #[link_name = "register-callback"]
            fn wit_import1(_: *mut u8, _: usize);
        }
        #[cfg(not(target_arch = "wasm32"))]
        unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) {
            unreachable!()
        }
        unsafe { wit_import1(ptr0.cast_mut(), len0) };
    }
}
#[allow(unused_unsafe, clippy::all)]
pub fn unregister_callback(name: &str) -> () {
    unsafe {
        let vec0 = name;
        let ptr0 = vec0.as_ptr().cast::<u8>();
        let len0 = vec0.len();
        #[cfg(target_arch = "wasm32")]
        #[link(wasm_import_module = "$root")]
        unsafe extern "C" {
            #[link_name = "unregister-callback"]
            fn wit_import1(_: *mut u8, _: usize);
        }
        #[cfg(not(target_arch = "wasm32"))]
        unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) {
            unreachable!()
        }
        unsafe { wit_import1(ptr0.cast_mut(), len0) };
    }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_test_cabi<T: Guest>() -> *mut u8 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::test();
    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
    let vec2 = (result0.into_bytes()).into_boxed_slice();
    let ptr2 = vec2.as_ptr().cast::<u8>();
    let len2 = vec2.len();
    ::core::mem::forget(vec2);
    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
    ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_test<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_call_callback_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: *mut u8,
    arg3: usize,
) -> *mut u8 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let base4 = arg2;
    let len4 = arg3;
    let mut result4 = _rt::Vec::with_capacity(len4);
    for i in 0..len4 {
        let base = base4.add(i * (2 * ::core::mem::size_of::<*const u8>()));
        let e4 = {
            let l1 = *base.add(0).cast::<*mut u8>();
            let l2 = *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
            let len3 = l2;
            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
            _rt::string_lift(bytes3)
        };
        result4.push(e4);
    }
    _rt::cabi_dealloc(
        base4,
        len4 * (2 * ::core::mem::size_of::<*const u8>()),
        ::core::mem::size_of::<*const u8>(),
    );
    let result5 = T::call_callback(_rt::string_lift(bytes0), result4);
    let ptr6 = (&raw mut _RET_AREA.0).cast::<u8>();
    let vec7 = (result5.into_bytes()).into_boxed_slice();
    let ptr7 = vec7.as_ptr().cast::<u8>();
    let len7 = vec7.len();
    ::core::mem::forget(vec7);
    *ptr6.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len7;
    *ptr6.add(0).cast::<*mut u8>() = ptr7.cast_mut();
    ptr6
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_call_callback<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
}
pub trait Guest {
    fn test() -> _rt::String;
    fn call_callback(name: _rt::String, args: _rt::Vec<_rt::String>) -> _rt::String;
}
#[doc(hidden)]
macro_rules! __export_world_imports_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "test")] unsafe extern "C" fn
        export_test() -> * mut u8 { unsafe { $($path_to_types)*:: _export_test_cabi::<$ty
        > () } } #[unsafe (export_name = "cabi_post_test")] unsafe extern "C" fn
        _post_return_test(arg0 : * mut u8,) { unsafe { $($path_to_types)*::
        __post_return_test::<$ty > (arg0) } } #[unsafe (export_name = "call-callback")]
        unsafe extern "C" fn export_call_callback(arg0 : * mut u8, arg1 : usize, arg2 : *
        mut u8, arg3 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
        _export_call_callback_cabi::<$ty > (arg0, arg1, arg2, arg3) } } #[unsafe
        (export_name = "cabi_post_call-callback")] unsafe extern "C" fn
        _post_return_call_callback(arg0 : * mut u8,) { unsafe { $($path_to_types)*::
        __post_return_call_callback::<$ty > (arg0) } } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_imports_cabi;
#[cfg_attr(target_pointer_width = "64", repr(align(8)))]
#[cfg_attr(target_pointer_width = "32", repr(align(4)))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 2 * ::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea = _RetArea(
    [::core::mem::MaybeUninit::uninit(); 2 * ::core::mem::size_of::<*const u8>()],
);
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod ohim {
    pub mod dom {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod event {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Event {
                handle: _rt::Resource<Event>,
            }
            impl Event {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Event {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "ohim:dom/event")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]event"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Event {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(ty: &str) -> Self {
                    unsafe {
                        let vec0 = ty;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "ohim:dom/event")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]event"]
                            fn wit_import1(_: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import1(ptr0.cast_mut(), len0) };
                        unsafe { Event::from_handle(ret as u32) }
                    }
                }
            }
            impl Event {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_type(&self) -> _rt::String {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "ohim:dom/event")]
                        unsafe extern "C" {
                            #[link_name = "[method]event.get-type"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod event_target {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct EventTarget {
                handle: _rt::Resource<EventTarget>,
            }
            impl EventTarget {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for EventTarget {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "ohim:dom/event-target")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]event-target"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl EventTarget {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "ohim:dom/event-target")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]event-target"]
                            fn wit_import0() -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0() -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0() };
                        unsafe { EventTarget::from_handle(ret as u32) }
                    }
                }
            }
            impl EventTarget {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_event_listener(&self, ty: &str, callback: &str) -> () {
                    unsafe {
                        let vec0 = ty;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = callback;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "ohim:dom/event-target")]
                        unsafe extern "C" {
                            #[link_name = "[method]event-target.add-event-listener"]
                            fn wit_import2(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1.cast_mut(),
                                len1,
                            )
                        };
                    }
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod node {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Node {
                handle: _rt::Resource<Node>,
            }
            impl Node {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Node {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "ohim:dom/node")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]node"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Document {
                handle: _rt::Resource<Document>,
            }
            impl Document {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Document {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "ohim:dom/node")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]document"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Element {
                handle: _rt::Resource<Element>,
            }
            impl Element {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Element {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "ohim:dom/node")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]element"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn append_child(&self, child: Node) -> Node {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "ohim:dom/node")]
                        unsafe extern "C" {
                            #[link_name = "[method]node.append-child"]
                            fn wit_import0(_: i32, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import0(
                                (self).handle() as i32,
                                (&child).take_handle() as i32,
                            )
                        };
                        unsafe { Node::from_handle(ret as u32) }
                    }
                }
            }
            impl Document {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "ohim:dom/node")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]document"]
                            fn wit_import0() -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0() -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0() };
                        unsafe { Document::from_handle(ret as u32) }
                    }
                }
            }
            impl Document {
                #[allow(unused_unsafe, clippy::all)]
                pub fn url(&self) -> _rt::String {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "ohim:dom/node")]
                        unsafe extern "C" {
                            #[link_name = "[method]document.url"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
            impl Document {
                #[allow(unused_unsafe, clippy::all)]
                pub fn parent_element(&self) -> Option<Element> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "ohim:dom/node")]
                        unsafe extern "C" {
                            #[link_name = "[method]document.parent-element"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result4 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0.add(4).cast::<i32>();
                                    unsafe { Element::from_handle(l3 as u32) }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result4
                    }
                }
            }
            impl Element {
                #[allow(unused_unsafe, clippy::all)]
                pub fn has_attributes(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "ohim:dom/node")]
                        unsafe extern "C" {
                            #[link_name = "[method]element.has-attributes"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_imports_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_imports_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_imports_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:ohim:dom:imports:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 810] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xac\x05\x01A\x02\x01\
A\x0e\x01B\x07\x04\0\x05event\x03\x01\x01i\0\x01@\x01\x02tys\0\x01\x04\0\x12[con\
structor]event\x01\x02\x01h\0\x01@\x01\x04self\x03\0s\x04\0\x16[method]event.get\
-type\x01\x04\x03\0\x0eohim:dom/event\x05\0\x01B\x07\x04\0\x0cevent-target\x03\x01\
\x01i\0\x01@\0\0\x01\x04\0\x19[constructor]event-target\x01\x02\x01h\0\x01@\x03\x04\
self\x03\x02tys\x08callbacks\x01\0\x04\0'[method]event-target.add-event-listener\
\x01\x04\x03\0\x15ohim:dom/event-target\x05\x01\x01B\x14\x04\0\x04node\x03\x01\x04\
\0\x08document\x03\x01\x04\0\x07element\x03\x01\x01h\0\x01i\0\x01@\x02\x04self\x03\
\x05child\x04\0\x04\x04\0\x19[method]node.append-child\x01\x05\x01i\x01\x01@\0\0\
\x06\x04\0\x15[constructor]document\x01\x07\x01h\x01\x01@\x01\x04self\x08\0s\x04\
\0\x14[method]document.url\x01\x09\x01i\x02\x01k\x0a\x01@\x01\x04self\x08\0\x0b\x04\
\0\x1f[method]document.parent-element\x01\x0c\x01h\x02\x01@\x01\x04self\x0d\0\x7f\
\x04\0\x1e[method]element.has-attributes\x01\x0e\x03\0\x0dohim:dom/node\x05\x02\x01\
@\x01\x04names\x01\0\x03\0\x11register-callback\x01\x03\x03\0\x13unregister-call\
back\x01\x03\x01@\0\0s\x04\0\x04test\x01\x04\x01ps\x01@\x02\x04names\x04args\x05\
\0s\x04\0\x0dcall-callback\x01\x06\x04\0\x10ohim:dom/imports\x04\0\x0b\x0d\x01\0\
\x07imports\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x07\
0.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
